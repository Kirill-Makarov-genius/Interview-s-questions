package Solutions;

import java.util.Scanner;


// У Кати насыщенный день на работе. Ей надо передать n разных договоров коллегам. Все встречи происходят на разных этажах, а между этажами можно перемещаться только по лестничным пролетам — считается, что это улучшает физическую форму сотрудников. Прохождение каждого пролета занимает ровно  минуту.
// Сейчас Катя на парковочном этаже, планирует свой маршрут. Коллег можно посетить в любом порядке, но один из них покинет офис через  минут. С парковочного этажа лестницы нет — только лифт, на котором можно подняться на любой этаж.
// В итоге план Кати следующий:

// Подняться на лифте на произвольный этаж. Считается, что лифт поднимается на любой этаж за  минут.
// Передать всем коллегам договоры, перемещаясь между этажами по лестнице. Считается, что договоры на этаже передаются мгновенно.
// В первые  минут передать договор тому коллеге, который планирует уйти.
// Пройти минимальное количество лестничных пролетов.
// Помогите Кате выполнить все пункты ее плана.

// Формат входных данных
// В первой строке вводятся целые положительные числа  и   — количество сотрудников и время, когда один из сотрудников покинет офис (в минутах). В следующей строке n чисел — номера этажей, на которых находятся сотрудники. Все числа различны и по абсолютной величине не превосходят 100. Номера этажей даны в порядке возрастания. В следующей строке записан номер сотрудника, который уйдет через t минут.

// Формат выходных данных
// Выведите одно число — минимально возможное число лестничных пролетов, которое понадобится пройти Кате.

// Замечание
// В первом примере времени достаточно, чтобы Катя поднялась по этажам по порядку.
// Во втором примере Кате понадобится подняться к уходящему сотруднику, а потом пройти всех остальных — например, в порядке 


public class KateFloors {

    public void solutionKateFloors(){
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        int timeForSpecialFloor = sc.nextInt();
        int[] floors = new int[n];
        for(int i = 0; i < n; i++){
            floors[i] = sc.nextInt();
        }

        int minFloor = floors[0];
        int maxFloor = floors[n-1];
        int specialFloor = floors[sc.nextInt()-1];

        int base = maxFloor - minFloor;
        
        // Проверяем если можно успеть к уходящему с любого крайнего этажа
        if (timeForSpecialFloor >= Math.min(specialFloor - minFloor, maxFloor - specialFloor)){
            System.out.println(base);
        }
        // Если не успеваем
        else{

            // Начать снизу
            int path1 = (maxFloor - minFloor) + (specialFloor-minFloor);
            // Начать сверху
            int path2 = (maxFloor - minFloor) + (maxFloor - specialFloor);

            System.out.println(Math.min(path1, path2));

        }

        sc.close();
    }
    
}